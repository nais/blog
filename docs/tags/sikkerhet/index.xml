<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sikkerhet on nais blog</title>
    <link>https://nais.io/blog/tags/sikkerhet/</link>
    <description>Recent content in sikkerhet on nais blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>no-NO</language>
    <lastBuildDate>Mon, 02 Oct 2023 09:34:04 +0200</lastBuildDate><atom:link href="https://nais.io/blog/tags/sikkerhet/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pentesting in the open</title>
      <link>https://nais.io/blog/posts/teams-test/</link>
      <pubDate>Mon, 02 Oct 2023 09:34:04 +0200</pubDate>
      
      <guid>https://nais.io/blog/posts/teams-test/</guid>
      <description>Transparency has always been at the core of our mindset in the nais team. We open source just about all of our code, and use every opportunity to share our thoughts and processes through mediums such as this blog (although the rate of publishing lately doesn&amp;rsquo;t impress anyone&amp;hellip;), conference talks and various collaboration forums.
Traditionally, penetration tests have been shrouded in a fog of mystery. It is not common practice to be open about the results of such tests, and they often end up in a distant fileshare somewhere never to be seen again.</description>
    </item>
    
    <item>
      <title>SLSA</title>
      <link>https://nais.io/blog/posts/slsa/</link>
      <pubDate>Mon, 20 Jun 2022 22:10:00 +0200</pubDate>
      
      <guid>https://nais.io/blog/posts/slsa/</guid>
      <description>&amp;ldquo;Software supply chain&amp;rdquo; is a term describing everything that happens to code from the time it leaves the developers fingers until it runs in production. The code needs to be compiled, tested, packaged and deployed, and these steps take place in a variety of systems and use lots of complex third party solutions. Our apps also depend on an increasing number of third party libraries and frameworks that we often know next to nothing about.</description>
    </item>
    
    <item>
      <title>OAuth del 3 (PKCE)</title>
      <link>https://nais.io/blog/posts/oauth-del3-pkce/</link>
      <pubDate>Sun, 07 Mar 2021 12:49:37 +0100</pubDate>
      
      <guid>https://nais.io/blog/posts/oauth-del3-pkce/</guid>
      <description>Bakgrunn Dette er del 3 i serien om OAuth og OIDC. Den mest brukte OAuth-flyten, &amp;ldquo;Authorization Code flow&amp;rdquo;, innebærer at client og id provider utveksler hemmeligheter. Klienten må derfor være i stand til å holde på hemmelig informasjon på en trygg måte, i standarden omtales dette som confidential clients. For mobil-apps og &amp;ldquo;single page&amp;rdquo; webapplikasjoner har dette ikke vært gjennomførbart da hemmelighetene må distribueres helt ut til sluttbrukeren som en del av appen.</description>
    </item>
    
    <item>
      <title>FIDO2</title>
      <link>https://nais.io/blog/posts/fido2/</link>
      <pubDate>Mon, 11 Jan 2021 23:58:03 +0100</pubDate>
      
      <guid>https://nais.io/blog/posts/fido2/</guid>
      <description>According to the Verizon 2017 Data Breach Investigations Report more than 80% of all data breaches can be attributed to weak and/or stolen passwords. Despite all of their weaknesses passwords are still the de facto way to authenticate users because no one has come up with a viable alternative. Now, however, there is a new(-ish) kid in town. FIDO2 (more commonly known as WebAuthentication or WebAuthn) is a standard developed by the FIDO (Fast IDentity Online) alliance.</description>
    </item>
    
    <item>
      <title>Zero-trust networking in GCP</title>
      <link>https://nais.io/blog/posts/zero-trust-networking-in-gcp/</link>
      <pubDate>Tue, 29 Sep 2020 11:37:43 +0200</pubDate>
      
      <guid>https://nais.io/blog/posts/zero-trust-networking-in-gcp/</guid>
      <description>Background Firewalls and zones have been our primary defense mechanism for years. This model defines a strict perimeter around our applications. The perimiter is designed to keep potential attackers on the outside, but also to be able to control the flow of data out of the perimiter. The challenge with this model in a containerized world, is that our applications has become more distributed, which leaves us with more components and thus additional attack surfaces.</description>
    </item>
    
    <item>
      <title>OAuth del 2 (Token Exchange)</title>
      <link>https://nais.io/blog/posts/oauth2/</link>
      <pubDate>Wed, 16 Sep 2020 08:10:01 +0200</pubDate>
      
      <guid>https://nais.io/blog/posts/oauth2/</guid>
      <description>Bakgrunn I NAV er OAuth og OIDC de facto standard for å løse autentisering og autorisering i appene våre. I en løst koblet verden med mikrotjenester og zero trust er det imidlertid flere brikker som må på plass. Hvordan kan man på en trygg måte kalle andre tjenester videre bakover i kjeden og samtidig bevare sluttbrukerkonteksten? Tidligere har man benyttet såkalte &amp;ldquo;systembrukere&amp;rdquo;, dvs brukere som identifiserer systemet/tjenesten som det kalles fra.</description>
    </item>
    
    <item>
      <title>OAuth del 1</title>
      <link>https://nais.io/blog/posts/oauth1/</link>
      <pubDate>Thu, 10 Sep 2020 20:55:53 +0200</pubDate>
      
      <guid>https://nais.io/blog/posts/oauth1/</guid>
      <description>Innledning Dette er del 1 av 3 om OAuth og OIDC, hva det er, hvilke problemer det løser og hvordan vi bruker det i NAV. Denne første delen forsøker å forklare og avmystifisere standardene litt. Del 2 tar for seg den nylig standardiserte Token Exchange-flyten og hvordan vi har løst den med TokenX. Del 3 handler om &amp;ldquo;Proof Key for Code Exchange&amp;rdquo;, a.k.a. PKCE.
Bakgrunn Håndtering av identiteter og autorisering av brukere er vanskelig å gjøre riktig.</description>
    </item>
    
  </channel>
</rss>
